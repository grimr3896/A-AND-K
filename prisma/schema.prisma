
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider   = "prisma-client-js"
  engineType = "node-api"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model Product {
  id                String  @id @default(cuid())
  name              String
  sku               String? @unique
  category          String
  stock             Int
  price             Float
  lowStockThreshold Int
  cost              Float
  minPrice          Float
  supplier          String?
  description       String?
  imageUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  saleItems         SaleItem[]
}

model Sale {
  id            String      @id @default(cuid())
  date          DateTime    @default(now())
  customerName  String
  total         Float
  paymentMethod String
  items         SaleItem[]
  createdAt     DateTime @default(now())
}

model SaleItem {
  id         String   @id @default(cuid())
  saleId     String
  productId  String
  name       String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())

  sale       Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])

  @@index([saleId])
  @@index([productId])
}

model Layaway {
  id              String    @id @default(cuid())
  customerName    String
  productName     String
  totalAmount     Float
  amountPaid      Float
  status          String // Pending, Paid, Cancelled
  lastPaymentDate DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  payments        Payment[]
}

model Payment {
  id        String   @id @default(cuid())
  layawayId String
  date      DateTime @default(now())
  amount    Float
  method    String // Cash, M-Pesa, Card, Initial Deposit

  layaway   Layaway @relation(fields: [layawayId], references: [id], onDelete: Cascade)
  
  @@index([layawayId])
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  user      String
  action    String
  details   String
}

model User {
  id        String @id @default(cuid())
  username  String @unique
  role      String // Admin, Manager, Staff
}
